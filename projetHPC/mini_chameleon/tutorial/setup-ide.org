#+TITLE: IDE
#+AUTHOR: Emmanuel Agullo and Mathieu Faverge
#+INCLUDE: https://gitlab.inria.fr/elementaryx/emacs-elementaryx-ox-html-themes/-/raw/main/org/theme-bigblow-less.setup
#+PROPERTY: header-args:bash :eval no :exports both

* Back-end: building compile-commands.json

In the same proper software environment as proposed (with either [[./setup-guix.org][guix]]
or [[./setup-plafrim.org][environment modules]]), you can alternatively build the project with
the [[https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html][~-DCMAKE_EXPORT_COMPILE_COMMANDS=ON~]] =cmake= option, e.g.:

#+begin_src bash :eval no
  cd ./mini-chameleon
  mkdir -p build/debug/
  cmake . -B build/debug/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_MPI=ON -DENABLE_STARPU=ON
  ln -s build/debug/compile_commands.json .
#+end_src

# It is also possible -- but not necessary if the objective is only to obtain
# the ~compile_commands.json~ database -- to build the project with that set
# up: ~cmake --build build/debug~.

If you consider also =cuda=:

#+begin_src bash :eval no
  cd ./mini-chameleon
  mkdir -p build/debug-cuda
  cmake . -B build/debug-cuda/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_MPI=ON -DENABLE_STARPU=ON -DENABLE_CUDA=ON
  ln -s build/debug-cuda/compile_commands.json .
#+end_src


* Front-end: emacs-bedrock

** Solution 1: in a =guix= =shell= (most robust)

A possible minimal IDE can be used with:

#+begin_src bash
  guix shell --pure emacs-bedrock-as-default -D mini-chameleon --with-input=slurm=slurm@23 -- emacs -nw -f xterm-mouse-mode -f cua-mode
#+end_src

Note that we use ~emacs -nw~ on plafrim to have no (X) window, which
would otherwise be too slow on =plafrim=. We [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Text_002dOnly-Mouse.html][enable mouse-tracking
+support]] with ~-f xterm-mouse-mode~.

When editing a source code file (such as a ~.c~ file), you can turn on
auto-completion by clicking on =Tools= (in the top menu bar) and then
=Language Server Support (Eglot)=.

Note that the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][usual Windows-like]] cut (~C-x~), copy (~C-c~), and paste
(~C-v~) can be used (thanks to ~-f cua-mode~ option).

Of course, the standard ~emacs~ key bindings are also available. If
you prefer ~vim~-like key bindings, you can simply add ~(require
'evil)~ and ~(evil-mode)~ instructions in your =emacs= init file
(typically ~~/.config/emacs/init.el~ or ~~/.emacs.d/init.el~) or a
more fancy configuration such as the [[https://gitlab.inria.fr/solverstack/mini-examples/mini-chameleon/-/blob/master/init-evil.el][~init-evil.el~]] provided at the
root of the =mini-chameleon= project.

As mentioned above, we [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Text_002dOnly-Mouse.html][enable mouse-tracking +support]] (~-f
xterm-mouse-mode~). Note that it is also possible to access the top
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Menu-Bar.html][emacs menu]] with =F10=. You can for instance press =F10= and =Enter= to
visit a new file. You can turn on auto-completion (when editing a
source code file) by pressing =F10=, then =Tools= and then =Language
Server Support (Eglot)=). If the =F10= shortcut is aleady taken by
your window manager (such as =xfce=), you may want to rebind it either
in your window manager (check according to your window manager) or in
=emacs= (in this case, add for instance ~(global-set-key [f5]
'menu-bar-open)~ in your =emacs= ~init.el~ to rebind it to =F5=).

** Solution 2: persistent =guix= =install= (more ergonomic once set up?)

It is also possible to permanently install ~emacs-bedrock~. In this
case, an [[https://guix.gnu.org/manual/en/html_node/Application-Setup.html][extra guix setup]] is recommended to install and setup [[https://guix.gnu.org/manual/en/html_node/Application-Setup.html#Locales-1][locales]],
[[https://guix.gnu.org/manual/en/html_node/Application-Setup.html#X_002e509-Certificates-1][certificates]] and [[https://packages.guix.gnu.org/packages/bash-completion/][bash-completion]] in addition to
~emacs-bedrock-as-default~ and ~clang~.

The install step would thus be:

#+begin_src bash
  guix install glibc-locales nss-certs bash-completion emacs-bedrock-as-default
#+end_src

The setup step can be done via your ~/.bash_profile~ =bash= =profile=
file. We provide such a [[https://gitlab.inria.fr/solverstack/mini-examples/mini-chameleon/-/blob/master/.bash_profile][~.bash_profile~]] file at the root of the
=mini-chameleon= project. You can use it (~cp~) or add it to your own
~~/.bash_profile~. For instance:

#+begin_src bash
  cp ~/.bash_profile ~/.bash_profile.backup # Backup your current .bash_profile, if any
  cp ./.bash_profile ~/.bash_profile # Set up your .bash_profile so that it be automatically loaded in the next login sessions
  source ~/.bash_profile # Source it for the current session
#+end_src

Afterwards, ~emacs-bedrock~ can then be launched with the ~emacs~
command.

# You can the full development environment (including dependencies for developing mini-chameleon) installed via:

# #+begin_src
# guix package --manifest=./mini-chameleon-dev-ide-manifest.scm
# #+end_src

Note that when you update your channels (through ~guix pull
--allow-downgrades~), you can then uprade your packages (through ~guix
upgrade~).

* COMMENT Front-end: minimal emacs with lsp on plafrim

We follow: https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/, which we adapt with =guix=.

We install emacs and required packages:
#+begin_src bash
guix install emacs emacs-lsp-mode emacs-yasnippet emacs-lsp-treemacs emacs-helm-lsp emacs-projectile emacs-hydra emacs-flycheck emacs-company emacs-avy emacs-which-key emacs-helm-xref emacs-dap-mode ccls emacs-ccls
#+end_src

Here is a minimalist ~~/.bash_profile~:
#+begin_src bash
export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

GUIX_PROFILE="$HOME/.config/guix/current"
. "$GUIX_PROFILE/etc/profile"

GUIX_PROFILE="$HOME/.guix-profile"
. "$GUIX_PROFILE/etc/profile"
#+end_src

And here is an example of a minimalist initialization file
(~~/.emacs.d/init.el~):

#+begin_src bash
;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
(helm-mode)
(require 'helm-xref)
(define-key global-map [remap find-file] #'helm-find-files)
(define-key global-map [remap execute-extended-command] #'helm-M-x)
(define-key global-map [remap switch-to-buffer] #'helm-mini)

(which-key-mode)
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-cpptools)
  (yas-global-mode)
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))
#+end_src

Note that we define the leader key for =lsp-mode= in the ultimate line:
~(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)~. In this case, it is
~C-c l~ (~CTRL-c l~) but feel free to choose the one you like.
